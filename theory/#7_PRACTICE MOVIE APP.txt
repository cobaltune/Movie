
#7.0 To Do List part One

만들 것
- `state` / `effect` / `props`를 통한 아주 매우 엄청 간단한 to-do list

  function App() {
    const [toDo, setToDo] = useState('');
    const [toDos, setToDos] = useState([]);
    const onChange = (event) => setToDo(event.target.value);
    const onSubmit = (event) => {
      event.preventDefault();
      if (toDo === '') {
        return;
      }
      setToDo('');
    };
    console.log(toDos);
    return (
      <div>
        <form onSubmit={onSubmit}>
          <input
            onChange={onChange}
            value={toDo}
            type='text'
            placeholder='Write your to do...'
          />
          <button>Add To Do</button>
        </form>
      </div>
    );
  }

*javascript였다면 `toDos.push()`였겠지만 react에서는 `state`를 직접적으로 수정할 수 없다는 걸 기억해야 함


만약 네가 `toDos array`를 수정하고 싶다면, 수정하는 함수를 사용해야 함
⇒ `array`를 직접적으로 수정하지 않으면서 `setToDos`로 `array`에 element를 추가하는 방법

1. 값을 직접적으로 수정
2. `setTodos()`에 함수를 넣는 방법
    a. 이 함수는 첫 번째 argument로 현재의 `state`를 받아와야 함
    b. 그리고 새로운 `array`를 받아와야 함 (단, 이 `state`는 항상 새로운 거여야 함)


  const food = [1, 2, 3, 4]

  [6, food]
  // 출력값
  (2) [6, Array (4)]
  /* 6와 array를 갖게 됨 = array와 그 안에 또 다른 array */


  [6, ...food]
  // 출력값
  (2) [6, 1, 2, 3, 4]
  /* ...이 element를 돌려줌 */


위는 아래와 같은 구조

  setToDos(([]) => [toDo, ...[]]]);
  setToDos(([]) => [toDo]]);


react.js는 제목에 즉각적인 상호작용을 넣을 수 있음

  <h1>My To Dos ({toDos.length})</h1>


#7.1 To Do List part Two

수정하는 함수를 사용할 때 두 가지 옵션이 있다는 것을 꼭 기억해야 함

1. `setToDo("");` : 단순히 값만 보내는 방식
  a. 값을 보낼 때 이런 식으로 보낼 수 있음. 이 값은 우리가 저장한 data를 갖고 있음
  b. 만일 `setToDo`가 비어있는 string 값으로 불렸다면, 그건 `toDo`가 비어있는 string값이 될 거라는 것

2. `setToDos((currentAraay) ⇒ [toDo, …currentArray]);` : 함수를 보내는 방식
  a. 함수를 보낼 때 react.js는 함수의 첫 번째 argument로 현재 `state`를 보냄
     그러면 현재 `state`를 계산하거나, 새로운 `state`를 만드는데 사용할 수 있게 됨
  b. 현재 `toDos`를 받아와서 새로운 `toDo`의 `array`로 `return`하는 것
  c. 현재 `state`(=`toDo, …currentArray`)에 들어있는 모든 요소들을 더해서 새로운 `state`를 계산할 수 있음


배울 것

- `array`로부터 동일한 component에 있는 많은 것들을 `render`할 수 있는 방법
    = `array`를 가진 각각의 element를 각각의 component로 만들고 싶음
    

`map()` (= 예전 `array`를 가져와서 변형시킴)
: javascript 함수로 첫 번째 argument는 `value`여야하고 (=이건 각각의 `toDo`를 의미), 두 번째 argument는 `index`(number)

  - `array`를 가진 각각의 element를 다 바꾸고 싶고
  - 다 바뀐 새로운 `array`를 가지고 싶을 때

`map`은 `()`이 안에 함수를 넣을 수 있도록 해주는데, 이 함수는 `array`의 모든 `item`에 대해 실행됨
그리고 여기에서 무엇을 `return`하든지 간에 그 `return`한 값이 새로운 `array`에 들어가 있게 됨

  ['there', 'are', 'you', 'are', 'how', 'hello'].map(() => ":)")

  // 출력값
  (6) [':)', ':)', ':)', ':)', ':)', ':)',]
  0: ':)'
  1: ':)'
  2: ':)'
  3: ':)'
  4: ':)'
  5: ':)'
  length: 6

*문제
쓸모가 없음, 보다시피 기존의 `item`으로 접근할 수 없게 됨

좋은 소식은 `map`은 함수의 첫 번째 argument로 현재의 `item`을 가져올 수 있다는 것

  ['there', 'are', 'you', 'are', 'how', 'hello'].map((item) => item.toUpperCase())

  // 출력값
  (6) ['THERE', 'ARE', 'YOU', 'ARE', 'HOW', 'HELLO']
  // item이 모두 대문자가 되어 있는 새로운 array를 return한 것을 확인할 수 있음

`()`에 원하는 어떠한 변수명을 넣고, 그 말은 `item` 자체를 `return`할 수도 있다는 것
*포인트는 `map`의 함수의 첫 번째 argument가 진행되고 있는 순서에 맞는 `item`이라는 것


  function App() {
    const [toDo, setToDo] = useState('');
    const [toDos, setToDos] = useState([]);
    const onChange = (event) => setToDo(event.target.value);
    const onSubmit = (event) => {
      event.preventDefault();
      if (toDo === '') {
        return;
      }
      setToDos((currentArray) => [toDo, ...currentArray]);
      setToDo('');
    };
    console.log(toDos);
    return (
      <div>
        <h1>My To Dos ({toDos.length})</h1>
        <form onSubmit={onSubmit}>
          <input
            onChange={onChange}
            value={toDo}
            type='text'
            placeholder='Write your to do...'
          />
          <button>Add To Do</button>
        </form>
        <hr />
        <ul>
          {toDos.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      </div>
    );
  }

모든게 다 새로고침 되었기 때문에 이것들이 동작할때마다 새로운 버전의 `toDos`를 기준으로 동작하게 됨


*문제
같은 component의 `list`를 `render`할 때 `key`라는 `prop`을 넣어줘야 함
: react가 기본적으로 `list`에 있는 모든 `item`들을 인식하기 때문
*`key`는 고유의 값(unique)이어야 함

  function App() {
    const [toDo, setToDo] = useState('');
    const [toDos, setToDos] = useState([]);
    const onChange = (event) => setToDo(event.target.value);
    const onSubmit = (event) => {
      event.preventDefault();
      if (toDo === '') {
        return;
      }
      setToDos((currentArray) => [toDo, ...currentArray]);
      setToDo('');
    };
    console.log(toDos);
    return (
      <div>
        <h1>My To Dos ({toDos.length})</h1>
        <form onSubmit={onSubmit}>
          <input
            onChange={onChange}
            value={toDo}
            type='text'
            placeholder='Write your to do...'
          />
          <button>Add To Do</button>
        </form>
        <hr />
        <ul>
          {toDos.map((item, index) => (
            <li key={index}>{item}</li>
          ))}
        </ul>
      </div>
    );
  }


∴ `array`(단순 string으로 구성된 `array`)를 가져와서 그 `array`의 `item`들을 변형해서 `li`가 되도록 함

⇒ 여러 li로 구성된 하나의 array (아래와 같음)

  <ul>
    {[<li key={0}>{item}</li>, <li key={1}>{item}</li>, <li key={2}>{item}</li>... ]}
  </ul>


∴ 매우 적은 `state`로 component를 refresh할 새로운 `array`를 만들고, `toDos`에 있는 각각의 `item`으로 `li`를 만듦
⇒ 이와 같이 react element로서의 array를 얻을 수 있음

  // 콘솔창에서
  (4) ['you', 'are', 'how', 'hello']  // string으로 된 toDos

  (4) [{...}, {...}, {...}, {...}]  // react element로서의 array
  // li> props> children: "you"


#7.2 Coin Tracker

해볼 것

  - 암호화폐들과 그 가격들을 나열하는 프로젝트


원하는 바

  - 페이지나 앱을 들어왔을 때 로딩 메세지가 보이고
  - 코인들이 나열되면 로딩 메세지를 숨기고
  - 코인들을 멋진 리스트로 보여주는 것


두 가지 `state`

  1. 로딩을 위한 것
  2. 코인 리스트를 잠시 갖고 있기 위한 것

  function App() {
    const [loading, setLoading] = useState(true);
    return (
      <div>
        <h1>The coins</h1>
        {loading ? <strong>Loading...</strong> : null}
      </div>
    );
  }

코인 API(coinpaprika) 사이트
[https:*//api.coinpaprika.com/v1/tickers*](https://api.coinpaprika.com/v1/tickers)


component가 가장 처음으로 render되었을 때 이 함수를 즉시 실행시키고 싶음

  function App() {
    const [loading, setLoading] = useState(true);
    useEffect(() => {
      fetch(`https://api.coinpaprika.com/v1/tickers`);
    }, []);
    return (
      <div>
        <h1>The coins</h1>
        {loading ? <strong>Loading...</strong> : null}
      </div>
    );
  }

inspect > network > 어딘가에서 tickers를 request했다는 것을 확인할 수 있음

tickers > response로부터 이 json을 추출해내고 싶음

  function App() {
    const [loading, setLoading] = useState(true);
    useEffect(() => {
      fetch('https://api.coinpaprika.com/v1/tickers')
        .then((response) => response.json())
        .then((json) => console.log(json));
    }, []);
    return (
      <div>
        <h1>The coins</h1>
        {loading ? <strong>Loading...</strong> : null}
      </div>
    );
  }

  // 출력값
  {2500} [{...}, {...}, {...}, {...} ...]  // 엄청 큰 array


Q. 이 data를 component에서 어떻게 보여줄 수 있지 ?
A. 이 data를 `state`에 넣으면 되지 !

우리가 json 즉 `coins`를 얻었을 때 json의 값을 `setCoins`해줄 거임
이와 동시에 `coins` 얻기를 끝냈다면 `loading`을 `false`로 바꿔줘야 함

  function App() {
    const [loading, setLoading] = useState(true);
    const [coins, setCoins] = useState([]);
    useEffect(() => {
      fetch('https://api.coinpaprika.com/v1/tickers')
        .then((response) => response.json())
        .then((json) => {
          setCoins(json);
          setLoading(false);
        });
    }, []);
    return (
      <div>
        <h1>The coins</h1>
        {loading ? <strong>Loading...</strong> : null}
      </div>
    );
  }

⇒ 하나의 함수에서는 `loading`의 `state`를 변환하고, 또 다른 하나에서는 `coins`의 `state`를 바꿔줌

`map`의 두 번째 argument로는 `index`가 필요한데, 지금에 `coin`의 `index`는 필요 없음
: api를 살펴보면 `ID`를 가지고 있으니 우린 이 `ID`를 `key`로 써도 됨

*원래 `map`을 사용하면 react.js는 element에 `key`를 주도록 했음

  return (
      <div>
        <h1>The coins ({coins.length})</h1>
        {loading ? <strong>Loading...</strong> : null}
        <ul>
          {coins.map((coin) => (
            <li>
              {coin.name} ({coin.symbol}): ${coin.quotes.USD.price} USD
            </li>
          ))}
        </ul>
      </div>
    );

+) `coin`이라는 변수는 이 경우에서 `coin array`안에 있는 각각의 `coin`을 의미


만약에 이렇게 작성했더라면

  const [coins, setCoins] = useState();

*TypeError: Cannot read properties of undefined (reading ‘length’)* 하는 *error*를 얻게 될 거임
: component의 시작인 `coins`가 `undefined`기 때문에 그리고 `undefined`는 `length`를 갖고 있지 않으니
⇒ 이게 기본값을 지정하려는 이유, 적어도 비어있는 `array`로 두어서 `undefined`가 되지 않도록


코드 챌린지

  - USD를 BTC로 전환
  - `input`을 만들어서 (현재 ~달러를 가지고 있다고 적을 수 있게 하고)
  - 그 돈을 얼만큼의 BTC로 줄 수 있는지 알려주거나
  - 혹은 얼마만큼의 이더리움인지 솔라나인지 폴카닷인지
  - 그래서 `ul`이나 `li`를 만드는 것 대신에 `select`를 만들어서 `li`가 `option`이 되게

⇒ 내 돈으로 얼마만큼의 비트코인을 살 수 있는지 알려줘 !

만약 로딩하고 있다면 `select`를 숨길 수 있지 않은지

  function App() {
    const [loading, setLoading] = useState(true);
    const [coins, setCoins] = useState([]);
    useEffect(() => {
      fetch('https://api.coinpaprika.com/v1/tickers')
        .then((response) => response.json())
        .then((json) => {
          setCoins(json);
          setLoading(false);
        });
    }, []);
    return (
      <div>
        <h1>The coins {loading ? '(0)' : `(${coins.length})`}</h1>
        {loading ? (
          <strong>Loading...</strong>
        ) : (
          <select>
            {coins.map((coin) => (
              <option>
                {coin.name} ({coin.symbol}): ${coin.quotes.USD.price} USD
              </option>
            ))}
          </select>
        )}
      </div>
    );
  }


#7.3 Movie App part One

만들 것

  - 로딩중이라는 걸 보여주고
  - 로딩이 끝났을 때, 영화를 보여주고
  - 영화에 대한 정보들을 보여주고
  - 링크를 넣어서 그 영화에 대해 더 많은 것을 찾아볼 수 있도록 앱에서 다른 곳으로 연결


지금까지 하나의 상호작용이 있는 스크린은 만들 수 있었지만,
어떻게 페이지를 전환하는지는 몰랐으니

배울 것

  - 앱 안에서 페이지를 전환하는 방법


원하는 바

  - 별점이 8.5 이상인 영화만
  - 연도별로 정렬 (최신순)

영화 API 사이트
[https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year](https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year)


  function App() {
    const [loading, setLoading] = useState(true);
    const [movies, setMovies] = useState([]);
    useEffect(() => {
      fetch(
        `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year`,
      )
        .then((response) => response.json())
        .then((json) => {
          setMovies(json.data.movies);
          setLoading(false);
        });
    }, []);
    return <div>{loading ? <h1>Loading...</h1> : null}</div>;
  }

니콜라스 강의를 순서대로 따라오고 있다면 `then`이라는 것을 사용하지 않았을 거임
보통 요즘 좀 더 보편적으로 `async-await`를 사용함

  // async-await 1)

  function App() {
    const [loading, setLoading] = useState(true);
    const [movies, setMovies] = useState([]);
    const getMovies = async () => {
      const response = await fetch(
        `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year`,
      );
      const json = await response.json();
      setMovies(json.data.movies);
      setLoading(false);
    };
    useEffect(() => {
      getMovies();
    }, []);
    return <div>{loading ? <h1>Loading...</h1> : null}</div>;
  }

`async`와 `await`(비동기 문법:동기가 안되는 문법)을 아직 모르겠지만 이건 `then()`과 같음


  // async-await 2) = 이게 좀 더 짧은 버전

  function App() {
    const [loading, setLoading] = useState(true);
    const [movies, setMovies] = useState([]);
    const getMovies = async () => {
      const json = await (
        await fetch(
          `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year`,
        )
      ).json();
      setMovies(json.data.movies);
      setLoading(false);
    };
    useEffect(() => {
      getMovies();
    }, []);
    return <div>{loading ? <h1>Loading...</h1> : null}</div>;
  }

`await`을 감싸는 또 다른 `await`


`map()` 복습

  [1, 2, 3, 4, 5, 6].map(x => x * 2)

  // 출력값
  (6) [2, 4, 6, 8, 10, 12]

  /* 코드 해석
  array를 가져와서, map 함수는 새로운 array를 만들고,
  새로운 array의 item들은 이전의 array에서 내가 원하는 대로 변형된 item
  = array에서 각각의 item을 가져다가 2를 곱하고, 그 값을 return
  그리고 그 값은 가진 array를 돌려달라 함 */


리스트에 있는 것들을 화면에 보이도록

  function App() {
    const [loading, setLoading] = useState(true);
    const [movies, setMovies] = useState([]);
    const getMovies = async () => {
      const json = await (
        await fetch(
          `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year`,
        )
      ).json();
      setMovies(json.data.movies);
      setLoading(false);
    };
    useEffect(() => {
      getMovies();
    }, []);
    return (
      <div>
        {loading ? (
          <h1>Loading...</h1>
        ) : (
          <div>
            {movies.map((movie) => (
              <div key={movie.id}>
                <h2>{movie.title}</h2>
                <p>{movie.summary}</p>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  }


movie API를 보면 `genres array`에 있는 각각이 `genres`에 대해서 `map`을 해주자

  function App() {
    const [loading, setLoading] = useState(true);
    const [movies, setMovies] = useState([]);
    const getMovies = async () => {
      const json = await (
        await fetch(
          `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year`,
        )
      ).json();
      setMovies(json.data.movies);
      setLoading(false);
    };
    useEffect(() => {
      getMovies();
    }, []);
    return (
      <div>
        {loading ? (
          <h1>Loading...</h1>
        ) : (
          <div>
            {movies.map((movie) => (
              <div key={movie.id}>
                <img src={movie.medium_cover_image}></img>
                <h2>{movie.title}</h2>
                <p>{movie.summary}</p>
                <ul>
                  {movie.genres.map((g) => (
                    <li key={g}>{g}</li>
                    /* 코드 해석
                    각각의 g를 가져와서 각 g에 대해 li를 만드는 것 */
                  ))}
                </ul>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  }

  /* 코드 해석
  loading이 되었을 때 `setLoading`을 `false`로 바꿔주고
  `const [movies]에 movies`는 비어있고, `setMovies(json…)`에서 `movies`를 받아오면
  API로부터 얻은 data로 `state`를 변경
  그래서 `movies.map`을 하고 그렇게 각각의 `movie`에 접근해서 그 값을 변환할 수 있음 */

*`map`을 쓸 때마다 우리는 `key`를 element에 줘야 함
근데 여기서는 `ID`등 어떤 고유값이 없기 때문에 원한다면 `id` 대신 `g`를 줄 수 있음, `g`가 고유한 값인 한 괜찮음

∴ `state`로부터 받은 data를 보여준 것뿐, 그리고 `state`는 그 data를 API로부터 받아옴


>> Next video

ID를 얻을건데, 다음 영상에서 링크를 만들거라서 필요함
사람들이 제목을 클릭해서 또 다른 페이지로 가도록 하고 싶음
왜냐하면 우린 URL도 있으니까
이 URL은 모든 영화를 나열하고 있으며, 이 ID를 가진 영화에 대한 디테일을 보여주고 있음

⇒ 어떻게 페이지를 전환할 수 있는지 알려주고 싶대