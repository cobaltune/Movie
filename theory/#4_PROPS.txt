
#4.0 Props

각각의 로직들을 각각의 조각들로 분리시켜서
다른 자식 컴포넌트를 렌더링하는 큰 부모 컴포넌트를 가질 수 있음
+) 심지어 부모 컴포넌트보다 훨씬 큰 로직을 자식 컴포넌트가 갖고 있다고 하더라도


`props`
: 일종의 방식으로, 부모 컴포넌트로부터 자식 컴포넌트에 데이터를 보낼 수 있게 해주는 방법


만들 것
- 부모 컴포넌트로부터 자식 컴포넌트에 데이터를 보내는 예시


초기 세팅 코드

  function App() {
        return <div></div>;
      }
      const root = document.getElementById('root');
      ReactDOM.render(<App />, root);


많은 버튼이 있는 어플리케이션을 개발한다는 가정 하에 `<button>` 생성

  function SaveBtn() {
        return <button>Save Changes</button>;
      }

      function ConfirmBtn() {
        return <button>Confirm</button>;
      }

      function App() {
        return (
          <div>
            <SaveBtn />
            <ConfirmBtn />
          </div>
        );
      }
      const root = document.getElementById('root');
      ReactDOM.render(<App />, root);
  

React JS에서 `<style>`을 바꾸고 싶다면

  - css 사용
  - 다른 여러 라이브러리 사용
  - 가장 기본적으로 `<button>` 태그 내의 `<style>`을 변경
      - 평범한 javascript `object` 형식으로 작성


  function SaveBtn() {
        return (
          <button
            style={{
              backgroundColor: 'tomato',
              color: 'white',
              padding: '10px 20px',
              border: 0,
              borderRadius: 10,
            }}
          >
            Save Changes
          </button>
        );
      }

      function ConfirmBtn() {
        return (
          <button
            style={{
              backgroundColor: 'tomato',
              color: 'white',
              padding: '10px 20px',
              border: 0,
              borderRadius: 10,
            }}
          >
            Confirm
          </button>
        );
      }

위와 같은 `<style>`을 갖는 단 한 가지의 컴포넌트를 만든다면 ?
(= `<style>`을 재사용하되, 텍스트를 설정하고 변경할 수 있게)


<input type="text"  // html에서 input 설정
<button onClick={}  // JSX에서 event listener를 붙여주는 법
<img src=""  // html에서 img 설정

이 syntax(구문)를 우리의 커스텀 컴포넌트에 똑같이 적용할 수 있음
⇒ 이게 바로 설정하고, 재사용할 수 있는 방법 (데이터를 전달시키는 방법)


우리가 만들고 사용하는 모든 컴포넌트들은 `()`로 argument(인자)를 받음 (리액트가 넣어줌)

  function Btn(props) {

사람들은 이 인자 이름을 `props`라고 부름, `Btn`으로부터 전달받는 properties


  // Btn({text: "Save Changes"})
  <Btn text='Save Changes' />

  // Btn({text: "Continue"})
  <Btn text='Continue' />

  /* 코드 해석
  Btn 함수를 불러서 text라는 인자를 이런 식으로 보내는 것 : Btn은 함수
  그래서 어떤 props든 Btn 컴포넌트에 보내면
  그것들은 Btn 함수의 첫 번째 argument로 들어감 */

*두 번째 인자는 없음
`props`는 첫 번째이자 유일한 인자 (=Btn이 전달받는 유일한 인자 / props는 object)


같은 `Btn`컴포넌트를 사용하지만, `App`컴포넌트에 의해 설정되고 있음

  function Btn(props) {
        return (
          <button
            style={{
              backgroundColor: 'tomato',
              color: 'white',
              padding: '10px 20px',
              border: 0,
              borderRadius: 10,
            }}
          >
            {props.text}
          </button>
        );
      }

      function App() {
        return (
          <div>
            <Btn text='Save Changes' />
            <Btn text='Continue' />
          </div>
        );
      }


보통 사람들은 shortcut(지름길)로 {}를 열어서 property를 오브젝트로부터 꺼내서 받음

  function Btn({ text }) {
        return (
          <button
            style={{
              backgroundColor: 'tomato',
              color: 'white',
              padding: '10px 20px',
              border: 0,
              borderRadius: 10,
            }}
          >
            {text}
          </button>
        );
      }

      function App() {
        return (
          <div>
            <Btn text='Save Changes' />
            <Btn text='Continue' />
          </div>
        );
      }


추가로 같은 개수의 인자(또는 props)를 갖고 있지만 내용은 다름

  function Btn({ text, big }) {
        return (
          <button
            style={{
              backgroundColor: 'tomato',
              color: 'white',
              padding: '10px 20px',
              border: 0,
              borderRadius: 10,
              fontSize: big ? 18 : 16,
            }}
          >
            {text}
          </button>
        );
      }

      function App() {
        return (
          <div>
            <Btn text='Save Changes' big={true} />
            <Btn text='Continue' big={false} />
          </div>
        );
      }
      const root = document.getElementById('root');
      ReactDOM.render(<App />, root);

`props`를 기반으로 `<style>`안에서 `if else`를 사용할 수 있음